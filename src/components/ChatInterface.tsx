import { useState, useRef, useEffect } from 'react'
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Badge } from "@/components/ui/badge"
import { Send, Terminal, Settings, Zap, Play, Shield, Target, Wifi, Bot } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import { MetasploitSettings } from './MetasploitSettings'
import { CommandExecutor } from './CommandExecutor'
import { ExploitManager } from './ExploitManager'
import { AutomatedCommandSystem } from './AutomatedCommandSystem'
import { useSystemData } from '@/hooks/useSystemData'

interface Message {
  id: string
  type: 'user' | 'ai' | 'system'
  content: string
  timestamp: Date
  actions?: Array<{
    label: string
    action: string
    icon?: React.ReactNode
    target?: string
  }>
}

interface ChatInterfaceProps {
  onConfigSaved?: (config: any) => void
}

export const ChatInterface = ({ onConfigSaved }: ChatInterfaceProps) => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'ai',
      content: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Metasploit AI Assistant! üõ°Ô∏è\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞—Ç–∞–∫–∞–º–∏. –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ "–≤—ã–ø–æ–ª–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —ç–∫—Å–ø–ª–æ–π—Ç—ã –Ω–∞ [—Ü–µ–ª—å]" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.',
      timestamp: new Date(),
      actions: [
        { label: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', action: 'configure', icon: <Settings className="h-4 w-4" /> },
        { label: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞', action: 'auto-attack', icon: <Bot className="h-4 w-4" /> },
        { label: '–†—É—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã', action: 'command', icon: <Terminal className="h-4 w-4" /> },
        { label: '–ú–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤', action: 'exploit', icon: <Zap className="h-4 w-4" /> }
      ]
    }
  ])
  const [inputMessage, setInputMessage] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [activeModal, setActiveModal] = useState<string | null>(null)
  const [automatedSystem, setAutomatedSystem] = useState<any>(null)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const { toast } = useToast()
  const { sessionList, activeSessions, vulnerabilities } = useSystemData()

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const handleAutomatedAttack = (target: string) => {
    const systemMessage: Message = {
      id: Date.now().toString(),
      type: 'system',
      content: `ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ç–∞–∫–∏ –Ω–∞ —Ü–µ–ª—å: ${target}\n\n–≠—Ç–∞–ø—ã:\n1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤\n2. –ê–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π\n3. –í—ã–±–æ—Ä —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤\n4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n5. –ü–æ—Å—Ç-—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è`,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, systemMessage])

    if (automatedSystem) {
      automatedSystem.executeAutomatedFlow(target)
    }
  }

  const parseAutomatedCommand = (message: string): string | null => {
    const patterns = [
      /–≤—ã–ø–æ–ª–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —ç–∫—Å–ø–ª–æ–π—Ç—ã –Ω–∞\s+([^\s]+)/i,
      /–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞ –Ω–∞\s+([^\s]+)/i,
      /–∞—Ç–∞–∫—É–π\s+([^\s]+)/i,
      /–ø—Ä–æ–≤–µ—Ä—å\s+([^\s]+)/i
    ]

    for (const pattern of patterns) {
      const match = message.match(pattern)
      if (match) {
        return match[1]
      }
    }

    return null
  }

  const handleSendMessage = async (message: string) => {
    if (!message.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: message,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputMessage('')
    setIsTyping(true)

    // Check for automated attack command
    const target = parseAutomatedCommand(message)
    if (target) {
      setIsTyping(false)
      handleAutomatedAttack(target)
      return
    }

    // Simulate AI response
    setTimeout(() => {
      const aiResponse = generateAIResponse(message)
      setMessages(prev => [...prev, aiResponse])
      setIsTyping(false)
    }, 1000 + Math.random() * 2000)
  }

  const generateAIResponse = (userInput: string): Message => {
    const input = userInput.toLowerCase()
    
    if (input.includes('–∞–≤—Ç–æ–º–∞—Ç') || input.includes('–∞—Ç–∞–∫')) {
      return {
        id: Date.now().toString(),
        type: 'ai',
        content: '–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ç–∞–∫–∏ —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"–≤—ã–ø–æ–ª–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —ç–∫—Å–ø–ª–æ–π—Ç—ã –Ω–∞ [IP –∏–ª–∏ –¥–æ–º–µ–Ω]"\n\n–ü—Ä–∏–º–µ—Ä: "–≤—ã–ø–æ–ª–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —ç–∫—Å–ø–ª–æ–π—Ç—ã –Ω–∞ 192.168.1.1"\n\n–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n‚Ä¢ –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç—ã\n‚Ä¢ –ù–∞–π–¥–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏\n‚Ä¢ –í—ã–±–µ—Ä–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç—ã\n‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç –∞—Ç–∞–∫—É\n‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ—Ç –ø–æ—Å—Ç-—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é',
        timestamp: new Date(),
        actions: [
          { label: '–ü—Ä–∏–º–µ—Ä –∞—Ç–∞–∫–∏', action: 'auto-attack', icon: <Bot className="h-4 w-4" />, target: 'testphp.vulnweb.com' }
        ]
      }
    }
    
    if (input.includes('–Ω–∞—Å—Ç—Ä–æ–π') || input.includes('–ø–æ–¥–∫–ª—é—á') || input.includes('–∫–æ–Ω—Ñ–∏–≥')) {
      return {
        id: Date.now().toString(),
        type: 'ai',
        content: '–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Metasploit –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:\n\n‚Ä¢ –•–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞\n‚Ä¢ –ü–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n‚Ä¢ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.',
        timestamp: new Date(),
        actions: [
          { label: '–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', action: 'configure', icon: <Settings className="h-4 w-4" /> }
        ]
      }
    }
    
    if (input.includes('–∫–æ–º–∞–Ω–¥') || input.includes('–≤—ã–ø–æ–ª–Ω') || input.includes('–∫–æ–Ω—Å–æ–ª—å')) {
      return {
        id: Date.now().toString(),
        type: 'ai',
        content: '–ì–æ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã Metasploit! –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n‚Ä¢ `sessions -l` - —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π\n‚Ä¢ `db_status` - —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ `help` - —Å–ø—Ä–∞–≤–∫–∞\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.',
        timestamp: new Date(),
        actions: [
          { label: '–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–æ–ª—å', action: 'command', icon: <Terminal className="h-4 w-4" /> }
        ]
      }
    }
    
    if (input.includes('—ç–∫—Å–ø–ª–æ–π—Ç') || input.includes('–∞—Ç–∞–∫') || input.includes('exploit')) {
      return {
        id: Date.now().toString(),
        type: 'ai',
        content: '–ú–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç:\n\n‚Ä¢ –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø —ç–∫—Å–ø–ª–æ–π—Ç–∞\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n‚Ä¢ –£–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏ (RHOSTS)\n‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Ç–∞–∫—É\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.',
        timestamp: new Date(),
        actions: [
          { label: '–ú–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤', action: 'exploit', icon: <Zap className="h-4 w-4" /> }
        ]
      }
    }
    
    if (input.includes('—Å–µ—Å—Å–∏') || input.includes('sessions') || input.includes('–∞–∫—Ç–∏–≤–Ω')) {
      return {
        id: Date.now().toString(),
        type: 'ai',
        content: `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\n‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${activeSessions}\n‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: ${vulnerabilities}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö.`,
        timestamp: new Date(),
        actions: [
          { label: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Å—Å–∏–∏', action: 'sessions', icon: <Play className="h-4 w-4" /> }
        ]
      }
    }

    return {
      id: Date.now().toString(),
      type: 'ai',
      content: '–ü–æ–Ω—è–ª! –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Metasploit\n‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥\n‚Ä¢ –ó–∞–ø—É—Å–∫–æ–º —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏—è–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ.',
      timestamp: new Date(),
      actions: [
        { label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', action: 'configure', icon: <Settings className="h-4 w-4" /> },
        { label: '–ö–æ–º–∞–Ω–¥—ã', action: 'command', icon: <Terminal className="h-4 w-4" /> },
        { label: '–≠–∫—Å–ø–ª–æ–π—Ç—ã', action: 'exploit', icon: <Zap className="h-4 w-4" /> },
        { label: '–°–µ—Å—Å–∏–∏', action: 'sessions', icon: <Play className="h-4 w-4" /> }
      ]
    }
  }

  const handleAction = (action: string, target?: string) => {
    if (action === 'auto-attack' && target) {
      handleAutomatedAttack(target)
      return
    }
    setActiveModal(action)
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage(inputMessage)
    }
  }

  return (
    <div className="flex flex-col h-screen bg-gradient-to-br from-gray-900/95 via-gray-800/95 to-gray-900/95 backdrop-blur-sm">
      {/* Header with improved transparency */}
      <div className="bg-gray-800/60 backdrop-blur-md border-b border-gray-700/50 p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-purple-600/80 rounded-lg backdrop-blur-sm">
              <Shield className="h-6 w-6 text-white" />
            </div>
            <div>
              <h1 className="text-xl font-bold text-white">Metasploit AI</h1>
              <p className="text-sm text-gray-300">–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫</p>
            </div>
          </div>
          <div className="flex gap-2">
            <Badge variant="secondary" className="text-xs bg-green-600/20 text-green-400 border-green-600/30">
              <Wifi className="h-3 w-3 mr-1" />
              –û–Ω–ª–∞–π–Ω
            </Badge>
          </div>
        </div>
      </div>

      {/* Messages with improved styling */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
          >
            <div
              className={`max-w-[85%] sm:max-w-[70%] rounded-2xl p-4 backdrop-blur-sm border ${
                message.type === 'user'
                  ? 'bg-blue-600/80 text-white border-blue-500/30 ml-4'
                  : message.type === 'system'
                  ? 'bg-orange-600/20 text-orange-200 border-orange-500/30 mr-4'
                  : 'bg-gray-700/40 text-gray-100 border-gray-600/30 mr-4'
              }`}
            >
              <div className="whitespace-pre-wrap text-sm sm:text-base">
                {message.content}
              </div>
              
              {message.actions && (
                <div className="mt-3 flex flex-wrap gap-2">
                  {message.actions.map((action, index) => (
                    <Dialog key={index}>
                      <DialogTrigger asChild>
                        <Button
                          size="sm"
                          variant="outline"
                          className="border-gray-500/30 bg-gray-800/40 hover:bg-gray-600/40 text-xs sm:text-sm backdrop-blur-sm transition-all duration-200 hover:scale-105"
                          onClick={() => handleAction(action.action, action.target)}
                        >
                          {action.icon}
                          <span className="ml-1">{action.label}</span>
                        </Button>
                      </DialogTrigger>
                      <DialogContent className="bg-gray-800/95 border-gray-700/50 text-white max-w-4xl max-h-[90vh] overflow-y-auto backdrop-blur-md">
                        <DialogHeader>
                          <DialogTitle className="flex items-center gap-2">
                            {action.icon}
                            {action.label}
                          </DialogTitle>
                          <DialogDescription className="text-gray-400">
                            {action.action === 'configure' && '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Metasploit Framework'}
                            {action.action === 'command' && '–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã Metasploit –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ'}
                            {action.action === 'exploit' && '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç–∫—Å–ø–ª–æ–π—Ç—ã'}
                            {action.action === 'auto-attack' && '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞—Ç–∞–∫'}
                          </DialogDescription>
                        </DialogHeader>
                        
                        <div className="mt-4">
                          {action.action === 'configure' && (
                            <MetasploitSettings onConfigSaved={onConfigSaved || (() => {})} />
                          )}
                          {action.action === 'command' && <CommandExecutor />}
                          {action.action === 'exploit' && <ExploitManager />}
                          {action.action === 'auto-attack' && (
                            <AutomatedCommandSystem
                              isActive={true}
                              onCommandStart={() => {}}
                              onCommandComplete={(results) => {
                                console.log('Automation completed:', results)
                              }}
                            />
                          )}
                        </div>
                      </DialogContent>
                    </Dialog>
                  ))}
                </div>
              )}
              
              <div className="mt-2 text-xs opacity-60">
                {message.timestamp.toLocaleTimeString()}
              </div>
            </div>
          </div>
        ))}
        
        {isTyping && (
          <div className="flex justify-start">
            <div className="bg-gray-700/40 text-gray-100 rounded-2xl p-4 mr-4 backdrop-blur-sm border border-gray-600/30">
              <div className="flex items-center gap-2">
                <div className="flex gap-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse" style={{ animationDelay: '0.2s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse" style={{ animationDelay: '0.4s' }}></div>
                </div>
                <span className="text-sm text-gray-400">–ò–ò –ø–µ—á–∞—Ç–∞–µ—Ç...</span>
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input with improved transparency */}
      <div className="bg-gray-800/60 backdrop-blur-md border-t border-gray-700/50 p-4">
        <div className="flex gap-2">
          <Input
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder='–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: "–≤—ã–ø–æ–ª–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —ç–∫—Å–ø–ª–æ–π—Ç—ã –Ω–∞ rabby.at"'
            className="bg-gray-700/40 border-gray-600/50 text-white placeholder-gray-400 flex-1 backdrop-blur-sm focus:bg-gray-700/60 transition-all duration-200"
            disabled={isTyping}
          />
          <Button
            onClick={() => handleSendMessage(inputMessage)}
            disabled={!inputMessage.trim() || isTyping}
            className="bg-blue-600/80 hover:bg-blue-700/80 p-3 backdrop-blur-sm transition-all duration-200 hover:scale-105"
          >
            <Send className="h-4 w-4" />
          </Button>
        </div>
        
        <div className="mt-2 flex flex-wrap gap-2">
          <Button
            size="sm"
            variant="outline"
            className="border-gray-600/30 bg-gray-800/20 hover:bg-gray-600/40 text-xs backdrop-blur-sm"
            onClick={() => setInputMessage('–≤—ã–ø–æ–ª–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —ç–∫—Å–ø–ª–æ–π—Ç—ã –Ω–∞ testphp.vulnweb.com')}
          >
            <Target className="h-3 w-3 mr-1" />
            –¢–µ—Å—Ç–æ–≤–∞—è —Ü–µ–ª—å
          </Button>
          <Button
            size="sm"
            variant="outline"
            className="border-gray-600/30 bg-gray-800/20 hover:bg-gray-600/40 text-xs backdrop-blur-sm"
            onClick={() => setInputMessage('–ø–æ–∫–∞–∂–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏')}
          >
            <Play className="h-3 w-3 mr-1" />
            –°–µ—Å—Å–∏–∏
          </Button>
        </div>
      </div>

      <AutomatedCommandSystem
        isActive={false}
        onCommandStart={() => {}}
        onCommandComplete={() => {}}
      />
    </div>
  )
}
